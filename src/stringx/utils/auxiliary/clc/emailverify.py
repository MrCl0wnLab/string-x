"""
M√≥dulo collector para verifica√ß√£o de emails.

Este m√≥dulo implementa funcionalidade para verifica√ß√£o de emails,
incluindo valida√ß√£o de sintaxe, verifica√ß√£o de dom√≠nio MX e
verifica√ß√£o de SMTP quando poss√≠vel.

A verifica√ß√£o de emails √© um processo importante para:
- Validar se o formato do email est√° correto sintaticamente
- Verificar se o dom√≠nio possui servidores MX configurados para receber emails
- Tentar verificar a exist√™ncia da conta de email (quando a op√ß√£o SMTP est√° ativada)
- Reduzir taxa de rejei√ß√£o em campanhas de email marketing
- Identificar emails potencialmente falsos ou inexistentes em investiga√ß√µes OSINT

Este m√≥dulo implementa diferentes n√≠veis de verifica√ß√£o, desde a simples
valida√ß√£o de formato at√© tentativas de conex√£o SMTP para verifica√ß√£o de exist√™ncia.
"""
# Bibliotecas padr√£o
import re
import socket
import smtplib
import subprocess
from typing import List, Dict, Any, Optional, Tuple

# M√≥dulos locais
from stringx.core.basemodule import BaseModule


class EmailVerifier(BaseModule):
    """
    M√≥dulo coletor para verifica√ß√£o de emails.
    
    Esta classe permite verifica√ß√£o de endere√ßos de email atrav√©s de
    valida√ß√£o de sintaxe, consulta DNS MX e verifica√ß√£o SMTP b√°sica.
    """
    
    def __init__(self) -> None:
        """
        Inicializa o m√≥dulo de verifica√ß√£o de email.
        """
        super().__init__()
        # Metadados do m√≥dulo
        self.meta = {
            'name': 'Email Verifier',
            'author': 'MrCl0wn',
            'version': '1.0',
            'description': 'Verifica√ß√£o e valida√ß√£o de endere√ßos de email',
            'type': 'collector'
        ,
            'example': './strx -l emails.txt -st "echo {STRING}" -module "clc:emailverify" -pm'
        }
        # Op√ß√µes configur√°veis do m√≥dulo
        self.options = {
            'data': str(),      # Email address
            'check_mx': True,   # Verificar registros MX do dom√≠nio
            'check_smtp': False,  # Verificar servidor SMTP (pode ser detectado como spam)
            'timeout': 10,      # Timeout para opera√ß√µes            'debug': False,     # Modo de debug para mostrar informa√ß√µes detalhadas 
            'retry': 0,         # N√∫mero de tentativas de requisi√ß√£o
            'retry_delay': None,   # Atraso entre tentativas de requisi√ß√£o
        }
    

    
    def run(self) -> None:
        """
        Executa verifica√ß√£o de email.
        
        Esta fun√ß√£o realiza a verifica√ß√£o do endere√ßo de email fornecido,
        validando sua sintaxe, verificando registros MX e opcionalmente
        tentando uma verifica√ß√£o SMTP b√°sica.
        
        Returns:
            None: Os resultados s√£o armazenados atrav√©s do m√©todo set_result
            
        Raises:
            ValueError: Se o email tiver formato inv√°lido
            socket.gaierror: Se ocorrer erro na resolu√ß√£o DNS
            smtplib.SMTPException: Se ocorrer erro na conex√£o SMTP
            subprocess.SubprocessError: Se ocorrer erro na execu√ß√£o do nslookup
        """
        try:
            email = self.options.get('data', '').strip().lower()
            
            if not email:
                self.log_debug("Nenhum email fornecido")
                return
            
            # Limpar resultados anteriores para evitar ac√∫mulo
            self._result[self._get_cls_name()].clear()

            self.log_debug(f"Verificando email: {email}")
            
            # Valida√ß√£o b√°sica de sintaxe
            if not self._is_valid_email_syntax(email):
                self.log_debug("Sintaxe de email inv√°lida")
                self.set_result(f"{email}: Sintaxe inv√°lida")
                return
            
            username, domain = email.split('@')
            self.log_debug(f"Email dividido em: usu√°rio={username}, dom√≠nio={domain}")
            
            result = f"üìß Email: {email}\n"
            result += f"üë§ Usu√°rio: {username}\n"
            result += f"üåê Dom√≠nio: {domain}\n"
            
            # Verificar MX record
            if self.options.get('check_mx', True):
                self.log_debug(f"Verificando registros MX para {domain}")
                mx_status = self._check_mx_record(domain)
                result += f"üì¨ MX Record: {mx_status}\n"
                
                if 'n√£o encontrado' in mx_status.lower():
                    self.log_debug("Nenhum registro MX encontrado")
                    result += "‚ùå Status: Email inv√°lido (sem MX record)"
                    self.set_result(result)
                    return
            
            # Verificar SMTP (opcional e cuidadoso)
            if self.options.get('check_smtp', False):
                self.log_debug("Realizando verifica√ß√£o SMTP")
                smtp_status = self._check_smtp(email, domain)
                result += f"üì§ SMTP: {smtp_status}\n"
            
            # An√°lise adicional
            self.log_debug("Realizando an√°lise adicional do email")
            analysis = self._analyze_email(email, domain)
            if analysis:
                result += f"üîç An√°lise: {analysis}\n"
            
            result += "Status: Email v√°lido"
            self.log_debug("Verifica√ß√£o conclu√≠da com sucesso")
            self.set_result(result)
            
        except ValueError as e:
            self.handle_error(f"Erro de valida√ß√£o: {str(e)}")
        except socket.gaierror as e:
            self.handle_error(f"Erro de resolu√ß√£o DNS: {str(e)}")
        except smtplib.SMTPException as e:
            self.handle_error(e, "Erro SMTP EmailVerify")
        except subprocess.SubprocessError as e:
            self.handle_error(e, "Erro subprocess EmailVerify")
        except Exception as e:
            self.handle_error(e, "Erro EmailVerify")
    
    def _is_valid_email_syntax(self, email: str) -> bool:
        """
        Valida sintaxe b√°sica do email.
        
        Args:
            email: Endere√ßo de email a ser validado
            
        Returns:
            True se a sintaxe do email for v√°lida, False caso contr√°rio
        """
        # Regex para valida√ß√£o b√°sica
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        
        if not re.match(pattern, email):
            return False
        
        # Verifica√ß√µes adicionais
        if '..' in email or email.startswith('.') or email.endswith('.'):
            return False
        
        if email.count('@') != 1:
            return False
        
        username, domain = email.split('@')
        
        if len(username) > 64 or len(domain) > 253:
            return False
        
        return True
    
    def _check_mx_record(self, domain: str) -> str:
        """
        Verifica MX record do dom√≠nio.
        
        Args:
            domain: Dom√≠nio do email a ser verificado
            
        Returns:
            String com o resultado da verifica√ß√£o MX
            
        Raises:
            socket.gaierror: Se ocorrer erro na resolu√ß√£o DNS
            subprocess.SubprocessError: Se ocorrer erro na execu√ß√£o do nslookup
        """
        try:
            self.log_debug(f"Verificando registros MX para: {domain}")
            
            # Usar nslookup como fallback se socket DNS n√£o funcionar
            try:
                self.log_debug("Tentando verifica√ß√£o com nslookup")
                result = subprocess.run(
                    ['nslookup', '-type=MX', domain],
                    capture_output=True,
                    text=True,
                    timeout=self.options.get('timeout', 10)
                )
                
                if result.returncode == 0 and 'mail exchanger' in result.stdout.lower():
                    # Extrair servidores MX
                    lines = result.stdout.split('\n')
                    mx_servers = []
                    
                    for line in lines:
                        if 'mail exchanger' in line.lower():
                            parts = line.split('=')
                            if len(parts) > 1:
                                mx_server = parts[1].strip().split()[-1]
                                mx_servers.append(mx_server.rstrip('.'))
                    
                    if mx_servers:
                        self.log_debug(f"Servidores MX encontrados: {mx_servers}")
                        return f"Encontrado ({', '.join(mx_servers[:2])})"
                    
            except (subprocess.TimeoutExpired, FileNotFoundError) as e:
                self.log_debug(f"Erro na verifica√ß√£o com nslookup: {str(e)}")
                pass
            
            # Fallback: tentar resolu√ß√£o direta
            try:
                self.log_debug("Tentando resolu√ß√£o direta")
                mx_records = socket.getaddrinfo(domain, None)
                if mx_records:
                    self.log_debug("Dom√≠nio resolvido diretamente")
                    return "Encontrado (resolu√ß√£o direta)"
            except socket.gaierror as e:
                self.log_debug(f"Erro na resolu√ß√£o direta: {str(e)}")
                pass
            
            self.log_debug("Nenhum registro MX encontrado")
            return "N√£o encontrado"
            
        except Exception as e:
            self.log_debug(f"Erro na verifica√ß√£o MX: {str(e)}")
            return f"Erro na verifica√ß√£o: {str(e)}"
    
    def _check_smtp(self, email: str, domain: str) -> str:
        """
        Verifica√ß√£o SMTP b√°sica.
        
        Esta fun√ß√£o tenta conectar aos servidores SMTP mais comuns para verificar
        se o dom√≠nio aceita conex√µes. √â feita com cautela para evitar detec√ß√£o como spam.
        
        Args:
            email: Endere√ßo de email completo
            domain: Dom√≠nio do email
            
        Returns:
            String com o resultado da verifica√ß√£o SMTP
            
        Raises:
            smtplib.SMTPException: Se ocorrer erro espec√≠fico na conex√£o SMTP
            socket.error: Se ocorrer erro de socket
            socket.timeout: Se a conex√£o exceder o tempo limite
        """
        try:
            self.log_debug(f"Iniciando verifica√ß√£o SMTP para {domain}")
            
            # Tentar conectar ao servidor SMTP mais comum
            smtp_ports = [25, 587, 465]
            
            for port in smtp_ports:
                try:
                    self.log_debug(f"Tentando conex√£o SMTP na porta {port}")
                    # Timeout curto para evitar demora
                    server = smtplib.SMTP(timeout=5)
                    server.connect(domain, port)
                    
                    # Verifica√ß√£o muito b√°sica
                    code, message = server.helo('example.com')
                    if code == 250:
                        server.quit()
                        self.log_debug(f"Servidor SMTP ativo na porta {port}")
                        return f"Servidor SMTP ativo (porta {port})"
                    
                    server.quit()
                    
                except (smtplib.SMTPException, socket.error, socket.timeout) as e:
                    self.log_debug(f"Falha na porta {port}: {str(e)}")
                    continue
            
            self.log_debug("Nenhum servidor SMTP acess√≠vel")
            return "Servidor SMTP n√£o acess√≠vel"
            
        except Exception as e:
            self.log_debug(f"Erro na verifica√ß√£o SMTP: {str(e)}")
            return f"Erro SMTP: {str(e)}"
    
    def _analyze_email(self, email: str, domain: str) -> str:
        """
        Realiza an√°lise adicional do email.
        
        Esta fun√ß√£o verifica padr√µes e caracter√≠sticas do email para
        fornecer informa√ß√µes adicionais sobre sua natureza.
        
        Args:
            email: Endere√ßo de email completo
            domain: Dom√≠nio do email
            
        Returns:
            String com an√°lises e observa√ß√µes sobre o email
        """
        analysis = []
        
        try:
            username = email.split('@')[0]
            
            # Verificar padr√µes comuns
            if any(char in username for char in ['+', '.']):
                analysis.append("poss√≠vel alias")
            
            if username.isdigit():
                analysis.append("usu√°rio num√©rico")
            
            if len(username) > 20:
                analysis.append("usu√°rio longo")
            
            # Verificar dom√≠nios conhecidos
            common_domains = [
                'gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com',
                'aol.com', 'icloud.com', 'protonmail.com'
            ]
            
            if domain in common_domains:
                analysis.append("provedor p√∫blico")
            elif domain.endswith(('.gov.br', '.edu.br', '.org.br')):
                analysis.append("dom√≠nio institucional")
            elif '.' in domain and len(domain.split('.')[-1]) == 2:
                analysis.append("dom√≠nio pa√≠s espec√≠fico")
            
            # Verificar se parece descart√°vel
            disposable_patterns = [
                'temp', 'throw', 'dispos', '10min', 'guerrilla',
                'mailinator', 'trash', 'junk'
            ]
            
            if any(pattern in domain.lower() for pattern in disposable_patterns):
                analysis.append("poss√≠vel email descart√°vel")
            
            return ', '.join(analysis) if analysis else "padr√£o normal"
            
        except Exception as e:
            self.log_debug(f"Erro na an√°lise adicional: {str(e)}")
            return "an√°lise indispon√≠vel"
