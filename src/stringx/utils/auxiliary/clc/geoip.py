"""
M√≥dulo collector para geolocaliza√ß√£o de IPs.

Este m√≥dulo implementa funcionalidade para obter informa√ß√µes de
geolocaliza√ß√£o de endere√ßos IP usando APIs p√∫blicas gratuitas.

A geolocaliza√ß√£o de endere√ßos IP fornece informa√ß√µes valiosas para:
- Identificar a localiza√ß√£o aproximada (pa√≠s, cidade) da origem do tr√°fego
- Detectar potenciais amea√ßas com base na regi√£o de origem
- Analisar logs de acesso e tentativas de intrus√£o
- Verificar a legitimidade de conex√µes e requisi√ß√µes
- Mapear a distribui√ß√£o geogr√°fica de visitantes ou atacantes
- Identificar o provedor de servi√ßos associado ao endere√ßo IP

Este m√≥dulo utiliza m√∫ltiplas fontes de informa√ß√£o para obter dados
de geolocaliza√ß√£o com maior precis√£o e confiabilidade, alternando
entre diferentes APIs quando necess√°rio.
"""
import json
import asyncio
import ipaddress

from stringx.core.basemodule import BaseModule
from stringx.core.http_async import HTTPClient

class GeoIPCollector(BaseModule):
    """
    M√≥dulo coletor para geolocaliza√ß√£o de IPs.
    
    Esta classe permite obter informa√ß√µes detalhadas de geolocaliza√ß√£o
    de endere√ßos IP atrav√©s de m√∫ltiplas APIs p√∫blicas.
    """
    
    def __init__(self):
        """
        Inicializa o m√≥dulo de geolocaliza√ß√£o IP.
        """
        super().__init__()
        # Inst√¢ncia do cliente HTTP ass√≠ncrono
        self.request = HTTPClient()
        # Metadados do m√≥dulo
        self.meta = {
            'name': 'GeoIP Collector',
            'author': 'MrCl0wn',
            'version': '1.1',
            'description': 'Geolocaliza√ß√£o de endere√ßos IP',
            'type': 'collector'
        ,
            'example': './strx -l ips.txt -st "echo {STRING}" -module "clc:geoip" -pm'
        }
        # Op√ß√µes configur√°veis do m√≥dulo
        self.options = {
            'data': str(),  # IP address
            'api_provider': 'auto',  # auto, ipapi, ipinfo, freegeoip
            'include_isp': True,
            'timeout': 10,            'debug': False,  # Modo de debug para mostrar informa√ß√µes detalhadas 
            'retry': 0,              # N√∫mero de tentativas de requisi√ß√£o
            'retry_delay': None,        # Atraso entre tentativas de requisi√ß√£o   
        }
        
        
    
    def run(self):
        """
        Executa consulta de geolocaliza√ß√£o.
        """
        try:
            ip = self.options.get('data', '').strip()
            
            if not ip:
                self.log_debug("[!] Nenhum IP fornecido.")
                return
            
            # Limpar resultados anteriores para evitar ac√∫mulo
            self._result[self._get_cls_name()].clear()

            # Validar IP
            if not self._is_valid_ip(ip):
                self.set_result(f"{ip}: IP inv√°lido")
                return
            
            # Verificar se √© IP privado
            if self._is_private_ip(ip):
                self.set_result(f"{ip}: IP privado/local")
                return
            
            provider = self.options.get('api_provider', 'auto')
            
            # Tentar diferentes APIs em ordem de prefer√™ncia
            apis = ['ipapi', 'ipinfo', 'freegeoip'] if provider == 'auto' else [provider]
            
            for api in apis:
                try:
                    result = asyncio.run(self._query_api(ip, api))
                    if result:
                        self.set_result(result)
                        return
                except Exception:
                    continue
            
            self.set_result(f"{ip}: N√£o foi poss√≠vel obter geolocaliza√ß√£o")
            
        except Exception as e:
            self.handle_error(e, "Erro GeoIP")
    
    def _is_valid_ip(self, ip: str) -> bool:
        """Valida se √© um IP v√°lido."""
        try:
            ipaddress.ip_address(ip)
            return True
        except ValueError:
            return False
    
    def _is_private_ip(self, ip: str) -> bool:
        """Verifica se √© um IP privado."""
        try:
            ip_obj = ipaddress.ip_address(ip)
            return ip_obj.is_private or ip_obj.is_loopback or ip_obj.is_link_local
        except ValueError:
            return False
    
    async def _query_api(self, ip: str, api: str) -> str:
        """Consulta API espec√≠fica."""
        if api == 'ipapi':
            return await self._query_ipapi(ip)
        elif api == 'ipinfo':
            return await self._query_ipinfo(ip)
        elif api == 'freegeoip':
            return await self._query_freegeoip(ip)
        else:
            raise ValueError(f"API n√£o suportada: {api}")
    
    async def _query_ipapi(self, ip: str) -> str:
        """Consulta API ip-api.com (gratuita)."""
        try:
            url = f"http://ip-api.com/json/{ip}?fields=status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query"
            
            kwargs = {
                'headers': {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                    'Accept': 'application/json',
                },
                'timeout': self.options.get('timeout', 10),
            }
            
            response = await self.request.send_request([url], **kwargs)
            response = response[0]  # Obt√©m o primeiro resultado da lista
            
            if response.status_code == 200:
                data = json.loads(response.text)
                
                if data.get('status') == 'success':
                    result = f"üåç IP: {data.get('query', ip)}\n"
                    result += f"üó∫Ô∏è Localiza√ß√£o:\n"
                    result += f"  ‚Ä¢ Pa√≠s: {data.get('country', 'N/A')} ({data.get('countryCode', 'N/A')})\n"
                    result += f"  ‚Ä¢ Estado: {data.get('regionName', 'N/A')}\n"
                    result += f"  ‚Ä¢ Cidade: {data.get('city', 'N/A')}\n"
                    result += f"  ‚Ä¢ CEP: {data.get('zip', 'N/A')}\n"
                    result += f"üìç Coordenadas: {data.get('lat', 'N/A')}, {data.get('lon', 'N/A')}\n"
                    result += f"‚è∞ Timezone: {data.get('timezone', 'N/A')}\n"
                    
                    if self.options.get('include_isp', True):
                        result += f"üè¢ ISP: {data.get('isp', 'N/A')}\n"
                        result += f"üè≠ Org: {data.get('org', 'N/A')}\n"
                        result += f"üî¢ AS: {data.get('as', 'N/A')}\n"
                    
                    result += f"üìä Fonte: ip-api.com"
                    return result
            
            return None
                    
        except Exception:
            return None
    
    async def _query_ipinfo(self, ip: str) -> str:
        """Consulta API ipinfo.io (gratuita com limite)."""
        try:
            url = f"https://ipinfo.io/{ip}/json"
            
            kwargs = {
                'headers': {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                    'Accept': 'application/json',
                },
                'timeout': self.options.get('timeout', 10),
            }
            
            response = await self.http_client.send_request([url], **kwargs)
            response = response[0]
            
            if response.status_code == 200:
                data = json.loads(response.text)
                
                if 'ip' in data and 'bogon' not in data:
                    result = f"üåç IP: {data.get('ip', ip)}\n"
                    result += f"üó∫Ô∏è Localiza√ß√£o:\n"
                    
                    # Parse location
                    location = data.get('loc', '').split(',')
                    if len(location) == 2:
                        lat, lon = location
                        result += f"üìç Coordenadas: {lat}, {lon}\n"
                    
                    result += f"  ‚Ä¢ Cidade: {data.get('city', 'N/A')}\n"
                    result += f"  ‚Ä¢ Estado: {data.get('region', 'N/A')}\n"
                    result += f"  ‚Ä¢ Pa√≠s: {data.get('country', 'N/A')}\n"
                    result += f"  ‚Ä¢ CEP: {data.get('postal', 'N/A')}\n"
                    result += f"‚è∞ Timezone: {data.get('timezone', 'N/A')}\n"
                    
                    if self.options.get('include_isp', True):
                        result += f"üè¢ Org: {data.get('org', 'N/A')}\n"
                    
                    result += f"üìä Fonte: ipinfo.io"
                    return result
            
            return None
                    
        except Exception:
            return None
    
    async def _query_freegeoip(self, ip: str) -> str:
        """Consulta API freegeoip.app (gratuita)."""
        try:
            url = f"https://freegeoip.app/json/{ip}"
            
            kwargs = {
                'headers': {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                    'Accept': 'application/json',
                },
                'timeout': self.options.get('timeout', 10),
            }
            
            response = await self.http_client.send_request([url], **kwargs)
            response = response[0]
            
            if response.status_code == 200:
                data = json.loads(response.text)
                
                if data.get('ip') == ip:
                    result = f"üåç IP: {data.get('ip', ip)}\n"
                    result += f"üó∫Ô∏è Localiza√ß√£o:\n"
                    result += f"  ‚Ä¢ Pa√≠s: {data.get('country_name', 'N/A')} ({data.get('country_code', 'N/A')})\n"
                    result += f"  ‚Ä¢ Estado: {data.get('region_name', 'N/A')}\n"
                    result += f"  ‚Ä¢ Cidade: {data.get('city', 'N/A')}\n"
                    result += f"  ‚Ä¢ CEP: {data.get('zip_code', 'N/A')}\n"
                    result += f"üìç Coordenadas: {data.get('latitude', 'N/A')}, {data.get('longitude', 'N/A')}\n"
                    result += f"‚è∞ Timezone: {data.get('time_zone', 'N/A')}\n"
                    result += f"üìä Fonte: freegeoip.app"
                    return result
            
            return None
                    
        except Exception:
            return None